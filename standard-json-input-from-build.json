{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\n        return\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\n            isValidERC1271SignatureNow(signer, hash, signature);\n    }\n\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\n     * against the signer smart contract using ERC1271.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidERC1271SignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\n        );\n        return (success &&\n            result.length >= 32 &&\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/CrossChainAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"./IU2UExecutable.sol\";\r\nimport \"./IU2UGateway.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\n/**\r\n * @title CrossChainAggregator\r\n * @notice Cross-chain token swap aggregator using IU2U protocol\r\n * @dev Enables A token -> IU2U -> B token swaps across different chains\r\n */\r\ncontract CrossChainAggregator is IU2UExecutable, Ownable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // IU2U gateway contract\r\n    IU2UGateway public immutable iu2uGateway;\r\n\r\n    // Swap data structure for cross-chain operations\r\n    struct SwapData {\r\n        address tokenIn;           // Input token address\r\n        address tokenOut;          // Output token address (IU2U on source, target token on destination)\r\n        uint256 amountIn;          // Input amount\r\n        uint256 amountOutMin;      // Minimum output amount (slippage protection)\r\n        address to;                // Recipient address\r\n        uint256 deadline;          // Transaction deadline\r\n        bytes routerCalldata;      // Encoded function call for DEX router\r\n        address router;            // DEX router address\r\n    }\r\n\r\n    // Cross-chain swap request\r\n    struct CrossChainSwapRequest {\r\n        address user;              // Original user address\r\n        string destinationChain;   // Target chain name\r\n        address destinationToken;  // Target token on destination chain\r\n        uint256 amountOutMin;      // Minimum amount out on destination\r\n        uint256 deadline;          // Swap deadline\r\n        bytes destinationSwapData; // Swap calldata for destination chain\r\n        address destinationRouter; // Router address on destination chain\r\n    }\r\n\r\n    // Events\r\n    event CrossChainSwapInitiated(\r\n        address indexed user,\r\n        address indexed tokenIn,\r\n        uint256 amountIn,\r\n        string destinationChain,\r\n        address indexed destinationToken,\r\n        bytes32 swapId\r\n    );\r\n\r\n    event CrossChainSwapCompleted(\r\n        bytes32 indexed swapId,\r\n        address indexed user,\r\n        address indexed tokenOut,\r\n        uint256 amountOut\r\n    );\r\n\r\n    event SwapFailed(\r\n        bytes32 indexed swapId,\r\n        address indexed user,\r\n        string reason\r\n    );\r\n\r\n    // Supported routers per chain\r\n    mapping(address => bool) public supportedRouters;\r\n    \r\n    // Swap tracking\r\n    mapping(bytes32 => CrossChainSwapRequest) public swapRequests;\r\n    \r\n    // Failed swaps for manual recovery\r\n    mapping(bytes32 => bool) public failedSwaps;\r\n\r\n    constructor(\r\n        address gateway_,\r\n        address iu2uGateway_,\r\n        address initialOwner\r\n    ) IU2UExecutable(gateway_) Ownable() {\r\n        iu2uGateway = IU2UGateway(iu2uGateway_);\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @notice Initiate cross-chain swap: TokenA -> IU2U -> TokenB\r\n     * @param swapData Source chain swap data (TokenA -> IU2U)\r\n     * @param destinationChain Target chain name\r\n     * @param destinationToken Target token address\r\n     * @param destinationSwapData Encoded swap data for destination chain\r\n     * @param destinationRouter Router address on destination chain\r\n     * @param amountOutMin Minimum amount out on destination chain\r\n     */\r\n    function crossChainSwap(\r\n        SwapData calldata swapData,\r\n        string calldata destinationChain,\r\n        address destinationToken,\r\n        bytes calldata destinationSwapData,\r\n        address destinationRouter,\r\n        uint256 amountOutMin\r\n    ) external nonReentrant {\r\n        require(swapData.deadline >= block.timestamp, \"Swap expired\");\r\n        require(supportedRouters[swapData.router], \"Unsupported router\");\r\n        require(swapData.tokenOut == address(iu2uGateway.iu2uToken()), \"Output must be IU2U\");\r\n\r\n        // Generate unique swap ID\r\n        bytes32 swapId = keccak256(abi.encodePacked(\r\n            msg.sender,\r\n            swapData.tokenIn,\r\n            swapData.amountIn,\r\n            destinationChain,\r\n            destinationToken,\r\n            block.timestamp,\r\n            block.number\r\n        ));\r\n\r\n        // Store cross-chain swap request\r\n        swapRequests[swapId] = CrossChainSwapRequest({\r\n            user: msg.sender,\r\n            destinationChain: destinationChain,\r\n            destinationToken: destinationToken,\r\n            amountOutMin: amountOutMin,\r\n            deadline: swapData.deadline,\r\n            destinationSwapData: destinationSwapData,\r\n            destinationRouter: destinationRouter\r\n        });\r\n\r\n        // Transfer input token from user\r\n        IERC20(swapData.tokenIn).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            swapData.amountIn\r\n        );\r\n\r\n        // Execute swap on source chain (TokenA -> IU2U)\r\n        uint256 iu2uAmount = _executeSwap(swapData);\r\n        require(iu2uAmount >= swapData.amountOutMin, \"Insufficient output amount\");\r\n\r\n        // Prepare payload for destination chain\r\n        bytes memory payload = abi.encode(\r\n            swapId,\r\n            msg.sender,\r\n            destinationToken,\r\n            iu2uAmount,\r\n            amountOutMin,\r\n            swapData.deadline,\r\n            destinationSwapData,\r\n            destinationRouter\r\n        );\r\n\r\n        // Bridge IU2U to destination chain with swap instructions\r\n        _callContractWithToken(\r\n            destinationChain,\r\n            _getAggregatorAddress(destinationChain),\r\n            payload,\r\n            \"IU2U\",\r\n            iu2uAmount\r\n        );\r\n\r\n        emit CrossChainSwapInitiated(\r\n            msg.sender,\r\n            swapData.tokenIn,\r\n            swapData.amountIn,\r\n            destinationChain,\r\n            destinationToken,\r\n            swapId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Execute cross-chain swap completion on destination chain\r\n     * @dev Called by IU2U gateway when receiving cross-chain message\r\n     */\r\n    function _executeWithToken(\r\n        string calldata, /* sourceChain */\r\n        string calldata, /* sourceAddress */\r\n        bytes calldata payload,\r\n        string calldata tokenSymbol,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(\r\n            keccak256(bytes(tokenSymbol)) == keccak256(bytes(\"IU2U\")),\r\n            \"Invalid token\"\r\n        );\r\n\r\n        // Decode payload\r\n        (\r\n            bytes32 swapId,\r\n            address user,\r\n            address destinationToken,\r\n            uint256 iu2uAmount,\r\n            uint256 amountOutMin,\r\n            uint256 deadline,\r\n            bytes memory destinationSwapData,\r\n            address destinationRouter\r\n        ) = abi.decode(payload, (bytes32, address, address, uint256, uint256, uint256, bytes, address));\r\n\r\n        require(block.timestamp <= deadline, \"Swap expired\");\r\n        require(supportedRouters[destinationRouter], \"Unsupported router\");\r\n        require(amount == iu2uAmount, \"Amount mismatch\");\r\n\r\n        try this._performDestinationSwap(\r\n            swapId,\r\n            user,\r\n            destinationToken,\r\n            amount,\r\n            amountOutMin,\r\n            destinationSwapData,\r\n            destinationRouter\r\n        ) {\r\n            // Swap completed successfully\r\n        } catch Error(string memory reason) {\r\n            // Handle failed swap\r\n            failedSwaps[swapId] = true;\r\n\r\n            // Send IU2U directly to user as fallback\r\n            iu2uGateway.iu2uToken().transfer(user, amount);\r\n\r\n            emit SwapFailed(swapId, user, reason);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Perform destination chain swap (IU2U -> TokenB)\r\n     * @dev External function to enable try-catch error handling\r\n     */\r\n    function _performDestinationSwap(\r\n        bytes32 swapId,\r\n        address user,\r\n        address destinationToken,\r\n        uint256 iu2uAmount,\r\n        uint256 amountOutMin,\r\n        bytes calldata swapData,\r\n        address router\r\n    ) external {\r\n        require(msg.sender == address(this), \"Only self\");\r\n\r\n        IU2U iu2u = iu2uGateway.iu2uToken();\r\n\r\n        // Approve router to spend IU2U\r\n        iu2u.approve(router, iu2uAmount);\r\n\r\n        // Get balance before swap\r\n        uint256 balanceBefore = IERC20(destinationToken).balanceOf(address(this));\r\n\r\n        // Execute swap using provided calldata\r\n        (bool success, ) = router.call(swapData);\r\n        require(success, \"Router call failed\");\r\n\r\n        // Calculate received amount\r\n        uint256 balanceAfter = IERC20(destinationToken).balanceOf(address(this));\r\n        uint256 amountOut = balanceAfter - balanceBefore;\r\n        \r\n        require(amountOut >= amountOutMin, \"Insufficient output amount\");\r\n\r\n        // Transfer tokens to user\r\n        IERC20(destinationToken).safeTransfer(user, amountOut);\r\n\r\n        emit CrossChainSwapCompleted(swapId, user, destinationToken, amountOut);\r\n    }\r\n\r\n    /**\r\n     * @notice Execute swap on source chain\r\n     * @param swapData Swap parameters\r\n     * @return iu2uAmount Amount of IU2U received\r\n     */\r\n    function _executeSwap(SwapData calldata swapData) internal returns (uint256 iu2uAmount) {\r\n        IERC20 tokenIn = IERC20(swapData.tokenIn);\r\n        IERC20 iu2u = IERC20(swapData.tokenOut); // Should be IU2U\r\n\r\n        // Approve router to spend input token\r\n        tokenIn.approve(swapData.router, swapData.amountIn);\r\n\r\n        // Get IU2U balance before swap\r\n        uint256 balanceBefore = iu2u.balanceOf(address(this));\r\n\r\n        // Execute swap using provided calldata\r\n        (bool success, ) = swapData.router.call(swapData.routerCalldata);\r\n        require(success, \"Router call failed\");\r\n\r\n        // Calculate IU2U received\r\n        uint256 balanceAfter = iu2u.balanceOf(address(this));\r\n        iu2uAmount = balanceAfter - balanceBefore;\r\n\r\n        return iu2uAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Get aggregator address on destination chain\r\n     * @return Aggregator contract address on destination chain\r\n     */\r\n    function _getAggregatorAddress(string memory /* chainName */) internal view returns (string memory) {\r\n        // In practice, this would be a mapping of chain names to aggregator addresses\r\n        // For now, we'll use the same address format\r\n        return _addressToString(address(this));\r\n    }\r\n\r\n    /**\r\n     * @notice Convert address to string\r\n     */\r\n    function _addressToString(address addr) internal pure returns (string memory) {\r\n        bytes memory data = abi.encodePacked(addr);\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n        \r\n        bytes memory str = new bytes(2 + data.length * 2);\r\n        str[0] = \"0\";\r\n        str[1] = \"x\";\r\n        for (uint i = 0; i < data.length; i++) {\r\n            str[2+i*2] = alphabet[uint(uint8(data[i] >> 4))];\r\n            str[3+i*2] = alphabet[uint(uint8(data[i] & 0x0f))];\r\n        }\r\n        return string(str);\r\n    }\r\n\r\n    // Admin functions\r\n\r\n    /**\r\n     * @notice Add supported router\r\n     * @param router Router address to add\r\n     */\r\n    function addSupportedRouter(address router) external onlyOwner {\r\n        supportedRouters[router] = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Remove supported router\r\n     * @param router Router address to remove\r\n     */\r\n    function removeSupportedRouter(address router) external onlyOwner {\r\n        supportedRouters[router] = false;\r\n    }\r\n\r\n    /**\r\n     * @notice Emergency withdrawal of tokens\r\n     * @param token Token address\r\n     * @param amount Amount to withdraw\r\n     * @param to Recipient address\r\n     */\r\n    function emergencyWithdraw(\r\n        address token,\r\n        uint256 amount,\r\n        address to\r\n    ) external onlyOwner {\r\n        IERC20(token).safeTransfer(to, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Recover failed swap manually\r\n     * @param swapId Failed swap ID\r\n     * @param user User address\r\n     * @param token Token to send\r\n     * @param amount Amount to send\r\n     */\r\n    function recoverFailedSwap(\r\n        bytes32 swapId,\r\n        address user,\r\n        address token,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        require(failedSwaps[swapId], \"Swap not failed\");\r\n        \r\n        IERC20(token).safeTransfer(user, amount);\r\n        failedSwaps[swapId] = false;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IExecutable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\ninterface IExecutable {\r\n    error InvalidAddress();\r\n    error NotApprovedByGateway();\r\n\r\n    function execute(\r\n        bytes32 commandId,\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        bytes calldata payload\r\n    ) external;\r\n\r\n    function executeWithToken(\r\n        bytes32 commandId,\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        bytes calldata payload,\r\n        string calldata tokenSymbol,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n"
    },
    "contracts/interfaces/IIU2UGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\ninterface IIU2UGateway {\r\n    // Events\r\n    event ContractCall(\r\n        address indexed sender,\r\n        string destinationChain,\r\n        string destinationContractAddress,\r\n        bytes32 indexed payloadHash,\r\n        bytes payload\r\n    );\r\n\r\n    event ContractCallWithToken(\r\n        address indexed sender,\r\n        string destinationChain,\r\n        string destinationContractAddress,\r\n        bytes32 indexed payloadHash,\r\n        bytes payload,\r\n        string symbol,\r\n        uint256 amount\r\n    );\r\n\r\n    event ContractCallApproved(\r\n        bytes32 indexed commandId,\r\n        string sourceChain,\r\n        string sourceAddress,\r\n        address indexed contractAddress,\r\n        bytes32 indexed payloadHash,\r\n        bytes32 sourceTxHash,\r\n        uint256 sourceEventIndex\r\n    );\r\n\r\n    event ContractCallApprovedWithMint(\r\n        bytes32 indexed commandId,\r\n        string sourceChain,\r\n        string sourceAddress,\r\n        address indexed contractAddress,\r\n        bytes32 indexed payloadHash,\r\n        string symbol,\r\n        uint256 amount,\r\n        bytes32 sourceTxHash,\r\n        uint256 sourceEventIndex\r\n    );\r\n\r\n    event TokenSent(\r\n        address indexed sender,\r\n        string destinationChain,\r\n        string destinationAddress,\r\n        string symbol,\r\n        uint256 amount\r\n    );\r\n\r\n    event Executed(bytes32 indexed commandId);\r\n\r\n    // Core GMP functions\r\n    function callContract(\r\n        string calldata destinationChain,\r\n        string calldata destinationContractAddress,\r\n        bytes calldata payload\r\n    ) external;\r\n\r\n    function callContractWithToken(\r\n        string calldata destinationChain,\r\n        string calldata destinationContractAddress,\r\n        bytes calldata payload,\r\n        string calldata symbol,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function sendToken(\r\n        string calldata destinationChain,\r\n        string calldata destinationAddress,\r\n        string calldata symbol,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    // Validation functions\r\n    function isContractCallApproved(\r\n        bytes32 commandId,\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        address contractAddress,\r\n        bytes32 payloadHash\r\n    ) external view returns (bool);\r\n\r\n    function isContractCallAndMintApproved(\r\n        bytes32 commandId,\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        address contractAddress,\r\n        bytes32 payloadHash,\r\n        string calldata symbol,\r\n        uint256 amount\r\n    ) external view returns (bool);\r\n\r\n    function validateContractCall(\r\n        bytes32 commandId,\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        bytes32 payloadHash\r\n    ) external returns (bool);\r\n\r\n    function validateContractCallAndMint(\r\n        bytes32 commandId,\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        bytes32 payloadHash,\r\n        string calldata symbol,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    // Chain management\r\n    function addChain(string calldata chainName, uint256 chainId) external;\r\n    function removeChain(string calldata chainName) external;\r\n    function getChainId(string calldata chainName) external view returns (uint256);\r\n    function getChainName(uint256 chainId) external view returns (string memory);\r\n\r\n    // Admin functions\r\n    function addWhitelistedRelayer(address relayer) external;\r\n    function removeWhitelistedRelayer(address relayer) external;\r\n    function isWhitelistedRelayer(address relayer) external view returns (bool);\r\n}\r\n"
    },
    "contracts/IU2U.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract IU2U is ERC20, Ownable {\r\n    uint256 u2u_chainid = 39; // 39 is U2U Solaris Mainnet\r\n\r\n    // Authorized gateway for cross-chain operations\r\n    address public gateway;\r\n\r\n    // Native U2U <-> IU2U conversion events\r\n    event Deposited(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n\r\n    constructor(address owner_)\r\n        ERC20(\"Interoperable U2U\", \"IU2U\")\r\n        Ownable()\r\n    {\r\n        // Transfer ownership to the specified owner\r\n        _transferOwnership(owner_);\r\n    }\r\n\r\n    modifier onlyU2UChain() {\r\n        require(block.chainid == u2u_chainid, \"Not U2U Chain\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit native U2U tokens to mint equivalent IU2U tokens (1:1 ratio)\r\n     *\r\n     * This function allows users to lock their native U2U tokens in the contract\r\n     * and receive an equivalent amount of IU2U tokens. This is the entry point\r\n     * for users to participate in cross-chain transfers using the GMP protocol.\r\n     *\r\n     * Requirements:\r\n     * - Must be called on U2U chain (chainId 39 for mainnet)\r\n     * - Must send a positive amount of U2U (msg.value > 0)\r\n     * - U2U tokens are locked in the contract and cannot be withdrawn by contract owner\r\n     *\r\n     * Process:\r\n     * 1. Validates the sent U2U amount is greater than zero\r\n     * 2. Mints equivalent IU2U tokens to the sender's address\r\n     * 3. U2U tokens remain locked in the contract as collateral\r\n     *\r\n     * Example usage:\r\n     * ```\r\n     * // Deposit 100 U2U to get 100 IU2U\r\n     * iu2u.deposit{value: 100 ether}();\r\n     * ```\r\n     *\r\n     * @notice This creates a 1:1 backing between U2U and IU2U tokens\r\n     * @notice Users can later withdraw their U2U by burning IU2U tokens\r\n     */\r\n    function deposit() public payable onlyU2UChain {\r\n        require(msg.value > 0, 'Zero Value');\r\n\r\n        address account = msg.sender;\r\n        _mint(account, msg.value);\r\n\r\n        emit Deposited(account, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw native U2U tokens by burning equivalent IU2U tokens (1:1 ratio)\r\n     *\r\n     * This function allows users to redeem their locked U2U tokens by burning\r\n     * their IU2U tokens. This is the exit mechanism for users who want to\r\n     * convert their cross-chain IU2U tokens back to native U2U.\r\n     *\r\n     * Requirements:\r\n     * - Must be called on U2U chain (chainId 39 for mainnet)\r\n     * - User must have sufficient IU2U token balance\r\n     * - Contract must have sufficient U2U balance to honor the withdrawal\r\n     * - Amount must be greater than zero\r\n     *\r\n     * Security measures:\r\n     * - Burns IU2U tokens before transferring U2U (checks-effects-interactions pattern)\r\n     * - Uses low-level call for U2U transfer with success verification\r\n     * - Prevents reentrancy by burning tokens first\r\n     *\r\n     * Process:\r\n     * 1. Validates the withdrawal amount\r\n     * 2. Checks user has sufficient IU2U balance\r\n     * 3. Checks contract has sufficient U2U to transfer\r\n     * 4. Burns the specified amount of IU2U tokens from user's balance\r\n     * 5. Transfers equivalent U2U to the user\r\n     * 6. Reverts entire transaction if U2U transfer fails\r\n     *\r\n     * Example usage:\r\n     * ```\r\n     * // Withdraw 50 U2U by burning 50 IU2U\r\n     * iu2u.withdraw(50 ether);\r\n     * ```\r\n     *\r\n     * @param amount_ The amount of IU2U tokens to burn and equivalent U2U to withdraw\r\n     * @notice This maintains the 1:1 backing ratio between U2U and IU2U\r\n     * @notice Failed U2U transfers will revert the entire transaction\r\n     */\r\n    function withdraw(uint256 amount_) public onlyU2UChain {\r\n        address account = msg.sender;\r\n        require(amount_ > 0, \"Zero amount\");\r\n        require(address(this).balance >= amount_, \"Not enough U2U\");\r\n        require(balanceOf(account) >= amount_, \"Not enough IU2U\");\r\n\r\n        _burn(account, amount_);\r\n        (bool success, ) = address(payable(account)).call{value: amount_}(\"\");\r\n        require(success, \"Withdraw failed\");\r\n\r\n        emit Withdrawn(account, amount_);\r\n    }\r\n\r\n    /**\r\n     * @dev Mint tokens (for cross-chain transfers from gateway)\r\n     * @param to The address to mint tokens to\r\n     * @param amount The amount of tokens to mint\r\n     */\r\n    function mint(address to, uint256 amount) external {\r\n        require(msg.sender == owner() || msg.sender == gateway, \"Unauthorized\");\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n        require(to != address(0), \"Invalid recipient\");\r\n\r\n        _mint(to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Burn tokens (for cross-chain transfers from gateway)\r\n     * @param from The address to burn tokens from\r\n     * @param amount The amount of tokens to burn\r\n     */\r\n    function burn(address from, uint256 amount) external {\r\n        require(msg.sender == owner() || msg.sender == gateway, \"Unauthorized\");\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n        require(from != address(0), \"Invalid sender\");\r\n        require(balanceOf(from) >= amount, \"Insufficient balance\");\r\n\r\n        _burn(from, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the current U2U backing ratio\r\n     * @return The amount of U2U locked in the contract\r\n     */\r\n    function getU2UBalance() external view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the authorized gateway address\r\n     * @param gateway_ The gateway contract address\r\n     */\r\n    function setGateway(address gateway_) external onlyOwner {\r\n        require(gateway_ != address(0), \"Invalid gateway address\");\r\n        gateway = gateway_;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if the contract is fully backed (U2U balance >= IU2U supply)\r\n     * @return True if fully backed, false otherwise\r\n     */\r\n    function isFullyBacked() external view returns (bool) {\r\n        return address(this).balance >= totalSupply();\r\n    }\r\n\r\n    receive() external payable {}\r\n}"
    },
    "contracts/IU2UExecutable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport {IIU2UGateway} from \"./interfaces/IIU2UGateway.sol\";\r\nimport {IExecutable} from \"./interfaces/IExecutable.sol\";\r\n\r\n/**\r\n * @title IU2UExecutable\r\n * @dev Base contract for applications that want to receive GMP calls\r\n * Similar to Axelar's AxelarExecutable but for IU2U protocol\r\n */\r\nabstract contract IU2UExecutable is IExecutable {\r\n    IIU2UGateway public immutable gateway;\r\n\r\n    error NotGateway();\r\n\r\n    constructor(address gateway_) {\r\n        if (gateway_ == address(0)) revert InvalidAddress();\r\n        gateway = IIU2UGateway(gateway_);\r\n    }\r\n\r\n    modifier onlyGateway() {\r\n        if (msg.sender != address(gateway)) revert NotGateway();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Execute a cross-chain contract call\r\n     * @param commandId Unique identifier for the command\r\n     * @param sourceChain Name of the source chain\r\n     * @param sourceAddress Address of the sender on the source chain\r\n     * @param payload The payload sent from the source chain\r\n     */\r\n    function execute(\r\n        bytes32 commandId,\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        bytes calldata payload\r\n    ) external override onlyGateway {\r\n        bytes32 payloadHash = keccak256(payload);\r\n        \r\n        if (!gateway.validateContractCall(commandId, sourceChain, sourceAddress, payloadHash)) {\r\n            revert NotApprovedByGateway();\r\n        }\r\n        \r\n        _execute(sourceChain, sourceAddress, payload);\r\n    }\r\n\r\n    /**\r\n     * @dev Execute a cross-chain contract call with token transfer\r\n     * @param commandId Unique identifier for the command\r\n     * @param sourceChain Name of the source chain\r\n     * @param sourceAddress Address of the sender on the source chain\r\n     * @param payload The payload sent from the source chain\r\n     * @param tokenSymbol Symbol of the token transferred\r\n     * @param amount Amount of tokens transferred\r\n     */\r\n    function executeWithToken(\r\n        bytes32 commandId,\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        bytes calldata payload,\r\n        string calldata tokenSymbol,\r\n        uint256 amount\r\n    ) external override onlyGateway {\r\n        bytes32 payloadHash = keccak256(payload);\r\n        \r\n        if (!gateway.validateContractCallAndMint(\r\n            commandId, \r\n            sourceChain, \r\n            sourceAddress, \r\n            payloadHash, \r\n            tokenSymbol, \r\n            amount\r\n        )) {\r\n            revert NotApprovedByGateway();\r\n        }\r\n        \r\n        _executeWithToken(sourceChain, sourceAddress, payload, tokenSymbol, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Override this function to implement your application logic\r\n     * @param sourceChain Name of the source chain\r\n     * @param sourceAddress Address of the sender on the source chain\r\n     * @param payload The payload sent from the source chain\r\n     */\r\n    function _execute(\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        bytes calldata payload\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Override this function to implement your application logic with tokens\r\n     * @param sourceChain Name of the source chain\r\n     * @param sourceAddress Address of the sender on the source chain\r\n     * @param payload The payload sent from the source chain\r\n     * @param tokenSymbol Symbol of the token transferred\r\n     * @param amount Amount of tokens transferred\r\n     */\r\n    function _executeWithToken(\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        bytes calldata payload,\r\n        string calldata tokenSymbol,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Convenience function to call another contract on another chain\r\n     * @param destinationChain Name of the destination chain\r\n     * @param destinationAddress Address of the destination contract\r\n     * @param payload Payload to send\r\n     */\r\n    function _callContract(\r\n        string memory destinationChain,\r\n        string memory destinationAddress,\r\n        bytes memory payload\r\n    ) internal {\r\n        gateway.callContract(destinationChain, destinationAddress, payload);\r\n    }\r\n\r\n    /**\r\n     * @dev Convenience function to call another contract on another chain with tokens\r\n     * @param destinationChain Name of the destination chain\r\n     * @param destinationAddress Address of the destination contract\r\n     * @param payload Payload to send\r\n     * @param symbol Token symbol\r\n     * @param amount Token amount\r\n     */\r\n    function _callContractWithToken(\r\n        string memory destinationChain,\r\n        string memory destinationAddress,\r\n        bytes memory payload,\r\n        string memory symbol,\r\n        uint256 amount\r\n    ) internal {\r\n        gateway.callContractWithToken(destinationChain, destinationAddress, payload, symbol, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/IU2UGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport {SignatureChecker} from \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\r\nimport \"./interfaces/IIU2UGateway.sol\";\r\nimport \"./IU2UExecutable.sol\";\r\nimport \"./IU2U.sol\";\r\n\r\ncontract IU2UGateway is IIU2UGateway, Ownable {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using SignatureChecker for address;\r\n    using ECDSA for bytes32;\r\n\r\n    uint256 u2u_chainid = 39; // 39 is U2U Solaris Mainnet\r\n    IU2U public immutable iu2uToken;\r\n    EnumerableSet.AddressSet private relayers;\r\n\r\n    mapping(address => bool) public whitelisted;\r\n    mapping(bytes32 => bool) public commandExecuted;\r\n    mapping(string => uint256) public chainIds;\r\n    mapping(uint256 => string) public chainNames;\r\n    mapping(bytes32 => bytes) public approvedPayloads; // Store approved payloads for execution\r\n\r\n    // GMP Protocol structures\r\n    struct Command {\r\n        uint256 commandType;\r\n        bytes data;\r\n    }\r\n\r\n    // Command types\r\n    uint256 public constant COMMAND_APPROVE_CONTRACT_CALL = 0;\r\n    uint256 public constant COMMAND_APPROVE_CONTRACT_CALL_WITH_MINT = 1;\r\n    uint256 public constant COMMAND_BURN_TOKEN = 2;\r\n    uint256 public constant COMMAND_MINT_TOKEN = 4;\r\n\r\n    event RelayerAdded(address indexed relayer);\r\n    event RelayerRemoved(address indexed relayer);\r\n    event ChainAdded(string indexed chainName, uint256 chainId);\r\n    event ChainRemoved(string indexed chainName);\r\n\r\n    constructor(address owner_, address payable iu2uToken_) Ownable() {\r\n        // Transfer ownership to the specified owner\r\n        _transferOwnership(owner_);\r\n\r\n        // Set IU2U token address\r\n        iu2uToken = IU2U(iu2uToken_);\r\n\r\n        // Initialize default chains\r\n        chainIds[\"u2u-solaris-mainnet\"] = u2u_chainid;\r\n        chainNames[u2u_chainid] = \"u2u-solaris-mainnet\";\r\n        chainIds[\"ethereum\"] = 1;\r\n        chainNames[1] = \"ethereum\";\r\n        chainIds[\"bsc\"] = 56;\r\n        chainNames[56] = \"bsc\";\r\n        chainIds[\"polygon\"] = 137;\r\n        chainNames[137] = \"polygon\";\r\n        chainIds[\"base\"] = 8453;\r\n        chainNames[8453] = \"base\";\r\n        chainIds[\"arbitrum\"] = 42161;\r\n        chainNames[42161] = \"arbitrum\";\r\n        chainIds[\"avalanche\"] = 43114;\r\n        chainNames[43114] = \"avalanche\";\r\n        chainIds[\"optimism\"] = 10;\r\n        chainNames[10] = \"optimism\";\r\n    }\r\n\r\n    modifier onlyRelayer() {\r\n        require(whitelisted[msg.sender], \"Caller not whitelisted relayers\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyU2UChain() {\r\n        require(block.chainid == u2u_chainid, \"Not U2U Chain\");\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(bytes32 commandId) {\r\n        require(!commandExecuted[commandId], \"Command already executed\");\r\n        _;\r\n    }\r\n\r\n    // Chain management functions\r\n    function addChain(string memory chainName, uint256 chainId) external onlyOwner {\r\n        require(bytes(chainName).length > 0, \"Invalid chain name\");\r\n        require(chainId > 0, \"Invalid chain ID\");\r\n        require(chainIds[chainName] == 0, \"Chain already exists\");\r\n\r\n        chainIds[chainName] = chainId;\r\n        chainNames[chainId] = chainName;\r\n\r\n        emit ChainAdded(chainName, chainId);\r\n    }\r\n\r\n    function removeChain(string memory chainName) external onlyOwner {\r\n        uint256 chainId = chainIds[chainName];\r\n        require(chainId > 0, \"Chain does not exist\");\r\n\r\n        delete chainIds[chainName];\r\n        delete chainNames[chainId];\r\n\r\n        emit ChainRemoved(chainName);\r\n    }\r\n\r\n    function getChainId(string memory chainName) external view returns (uint256) {\r\n        return chainIds[chainName];\r\n    }\r\n\r\n    function getChainName(uint256 chainId) external view returns (string memory) {\r\n        return chainNames[chainId];\r\n    }\r\n\r\n    // add new whitelisted relayer\r\n    function addWhitelistedRelayer(address relayer) public onlyOwner {\r\n        require(relayer != address(0), 'address is not valid');\r\n        require(!whitelisted[relayer], 'Already relayer');\r\n\r\n        whitelisted[relayer] = true;\r\n        relayers.add(relayer);\r\n\r\n        emit RelayerAdded(relayer);\r\n    }\r\n\r\n    // remove current whitelisted relayer\r\n    function removeWhitelistedRelayer(address relayer) public onlyOwner {\r\n        require(whitelisted[relayer], 'Relayer not whitelisted');\r\n\r\n        whitelisted[relayer] = false;\r\n        relayers.remove(relayer);\r\n\r\n        emit RelayerRemoved(relayer);\r\n    }\r\n\r\n    // GMP Protocol Core Functions\r\n    /**\r\n     * @dev Call a contract on another chain\r\n     * @param destinationChain The name of the destination chain\r\n     * @param destinationContractAddress The address of the contract to call\r\n     * @param payload The payload to send to the contract\r\n     */\r\n    function callContract(\r\n        string memory destinationChain,\r\n        string memory destinationContractAddress,\r\n        bytes memory payload\r\n    ) external {\r\n        require(chainIds[destinationChain] > 0, \"Unsupported destination chain\");\r\n        require(bytes(destinationContractAddress).length > 0, \"Invalid destination address\");\r\n\r\n        bytes32 payloadHash = keccak256(payload);\r\n\r\n        emit ContractCall(\r\n            msg.sender,\r\n            destinationChain,\r\n            destinationContractAddress,\r\n            payloadHash,\r\n            payload\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Call a contract on another chain with token transfer\r\n     * @param destinationChain The name of the destination chain\r\n     * @param destinationContractAddress The address of the contract to call\r\n     * @param payload The payload to send to the contract\r\n     * @param symbol The symbol of the token to send\r\n     * @param amount The amount of tokens to send\r\n     */\r\n    function callContractWithToken(\r\n        string memory destinationChain,\r\n        string memory destinationContractAddress,\r\n        bytes memory payload,\r\n        string memory symbol,\r\n        uint256 amount\r\n    ) external {\r\n        require(chainIds[destinationChain] > 0, \"Unsupported destination chain\");\r\n        require(bytes(destinationContractAddress).length > 0, \"Invalid destination address\");\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n        require(keccak256(bytes(symbol)) == keccak256(bytes(\"IU2U\")), \"Unsupported token\");\r\n\r\n        // Burn tokens from sender on source chain\r\n        iu2uToken.burn(msg.sender, amount);\r\n\r\n        bytes32 payloadHash = keccak256(payload);\r\n\r\n        emit ContractCallWithToken(\r\n            msg.sender,\r\n            destinationChain,\r\n            destinationContractAddress,\r\n            payloadHash,\r\n            payload,\r\n            symbol,\r\n            amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Send tokens to another chain\r\n     * @param destinationChain The name of the destination chain\r\n     * @param destinationAddress The address to send tokens to\r\n     * @param symbol The symbol of the token to send\r\n     * @param amount The amount of tokens to send\r\n     */\r\n    function sendToken(\r\n        string memory destinationChain,\r\n        string memory destinationAddress,\r\n        string memory symbol,\r\n        uint256 amount\r\n    ) external {\r\n        require(chainIds[destinationChain] > 0, \"Unsupported destination chain\");\r\n        require(bytes(destinationAddress).length > 0, \"Invalid destination address\");\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n        require(keccak256(bytes(symbol)) == keccak256(bytes(\"IU2U\")), \"Unsupported token\");\r\n\r\n        // Burn tokens from sender on source chain\r\n        iu2uToken.burn(msg.sender, amount);\r\n\r\n        emit TokenSent(\r\n            msg.sender,\r\n            destinationChain,\r\n            destinationAddress,\r\n            symbol,\r\n            amount\r\n        );\r\n    }\r\n\r\n    function sendToken(\r\n        string memory destinationChain,\r\n        string memory destinationAddress,        \r\n        string memory symbol\r\n    ) external payable onlyU2UChain {\r\n        uint256 amount = msg.value;\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n        require(keccak256(bytes(symbol)) == keccak256(bytes(\"IU2U\")), \"Unsupported token\");\r\n\r\n        payable(address(iu2uToken)).call{value: amount};\r\n\r\n        emit TokenSent(\r\n            msg.sender,\r\n            destinationChain,\r\n            destinationAddress,\r\n            symbol,\r\n            amount\r\n        );\r\n    }\r\n\r\n    // GMP Command Execution Functions (for relayers)\r\n\r\n    /**\r\n     * @dev Execute commands from relayers\r\n     * @param commandId Unique identifier for the command\r\n     * @param commands Array of commands to execute\r\n     * @param signature Signature from authorized relayer\r\n     */\r\n    function execute(\r\n        bytes32 commandId,\r\n        Command[] memory commands,\r\n        bytes memory signature\r\n    ) external onlyRelayer notExecuted(commandId) {\r\n        // Mark command as executed to prevent replay\r\n        commandExecuted[commandId] = true;\r\n\r\n        // Verify signature\r\n        bytes32 hash = keccak256(abi.encode(commandId, commands));\r\n        address signer = recoverSigner(hash, signature);\r\n        require(whitelisted[signer], \"Invalid signer\");\r\n\r\n        // Execute all commands\r\n        for (uint256 i = 0; i < commands.length; i++) {\r\n            _executeCommand(commandId, commands[i]);\r\n        }\r\n\r\n        emit Executed(commandId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to execute individual commands\r\n     */\r\n    function _executeCommand(bytes32 commandId, Command memory command) internal {\r\n        if (command.commandType == COMMAND_APPROVE_CONTRACT_CALL) {\r\n            _approveContractCall(commandId, command.data);\r\n        } else if (command.commandType == COMMAND_APPROVE_CONTRACT_CALL_WITH_MINT) {\r\n            _approveContractCallWithMint(commandId, command.data);\r\n        } else if (command.commandType == COMMAND_MINT_TOKEN) {\r\n            _mintToken(command.data);\r\n        } else if (command.commandType == COMMAND_BURN_TOKEN) {\r\n            _burnToken(command.data);\r\n        } else {\r\n            revert(\"Unknown command type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Approve a contract call from another chain\r\n     */\r\n    function _approveContractCall(bytes32 commandId, bytes memory data) internal {\r\n        (\r\n            string memory sourceChain,\r\n            string memory sourceAddress,\r\n            address contractAddress,\r\n            bytes32 payloadHash,\r\n            bytes32 sourceTxHash,\r\n            uint256 sourceEventIndex,\r\n            bytes memory payload\r\n        ) = abi.decode(data, (string, string, address, bytes32, bytes32, uint256, bytes));\r\n\r\n        // Verify payload hash matches\r\n        require(keccak256(payload) == payloadHash, \"Invalid payload hash\");\r\n\r\n        // Store approved payload for potential execution\r\n        approvedPayloads[commandId] = payload;\r\n\r\n        emit ContractCallApproved(\r\n            commandId,\r\n            sourceChain,\r\n            sourceAddress,\r\n            contractAddress,\r\n            payloadHash,\r\n            sourceTxHash,\r\n            sourceEventIndex\r\n        );\r\n\r\n        // Execute the contract call if the contract implements IU2UExecutable\r\n        if (contractAddress.code.length > 0) {\r\n            try this._safeExecuteCall(\r\n                commandId,\r\n                sourceChain,\r\n                sourceAddress,\r\n                contractAddress,\r\n                payload\r\n            ) {\r\n                // Call succeeded\r\n            } catch {\r\n                // Call failed, but we don't revert the entire transaction\r\n                // The event is still emitted so the approval is recorded\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Approve a contract call with mint from another chain\r\n     */\r\n    function _approveContractCallWithMint(bytes32 commandId, bytes memory data) internal {\r\n        (\r\n            string memory sourceChain,\r\n            string memory sourceAddress,\r\n            address contractAddress,\r\n            bytes32 payloadHash,\r\n            string memory symbol,\r\n            uint256 amount,\r\n            bytes32 sourceTxHash,\r\n            uint256 sourceEventIndex,\r\n            bytes memory payload\r\n        ) = abi.decode(data, (string, string, address, bytes32, string, uint256, bytes32, uint256, bytes));\r\n\r\n        require(keccak256(bytes(symbol)) == keccak256(bytes(\"IU2U\")), \"Unsupported token\");\r\n\r\n        // Verify payload hash matches\r\n        require(keccak256(payload) == payloadHash, \"Invalid payload hash\");\r\n\r\n        // Store approved payload for potential execution\r\n        approvedPayloads[commandId] = payload;\r\n\r\n        // Mint tokens to the destination contract\r\n        iu2uToken.mint(contractAddress, amount);\r\n\r\n        emit ContractCallApprovedWithMint(\r\n            commandId,\r\n            sourceChain,\r\n            sourceAddress,\r\n            contractAddress,\r\n            payloadHash,\r\n            symbol,\r\n            amount,\r\n            sourceTxHash,\r\n            sourceEventIndex\r\n        );\r\n\r\n        // Execute the contract call with token if the contract implements IU2UExecutable\r\n        if (contractAddress.code.length > 0) {\r\n            try this._safeExecuteCallWithToken(\r\n                commandId,\r\n                sourceChain,\r\n                sourceAddress,\r\n                contractAddress,\r\n                payload,\r\n                symbol,\r\n                amount\r\n            ) {\r\n                // Call succeeded\r\n            } catch {\r\n                // Call failed, but we don't revert the entire transaction\r\n                // The tokens are still minted and event is emitted\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Mint tokens (for cross-chain transfers)\r\n     */\r\n    function _mintToken(bytes memory data) internal {\r\n        (address to, uint256 amount, string memory symbol) = abi.decode(data, (address, uint256, string));\r\n\r\n        require(keccak256(bytes(symbol)) == keccak256(bytes(\"IU2U\")), \"Unsupported token\");\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n        require(to != address(0), \"Invalid recipient\");\r\n\r\n        // Mint tokens using the IU2U token contract\r\n        iu2uToken.mint(to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Burn tokens (for cross-chain transfers)\r\n     */\r\n    function _burnToken(bytes memory data) internal {\r\n        (address from, uint256 amount, string memory symbol) = abi.decode(data, (address, uint256, string));\r\n\r\n        require(keccak256(bytes(symbol)) == keccak256(bytes(\"IU2U\")), \"Unsupported token\");\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n        require(from != address(0), \"Invalid sender\");\r\n\r\n        // Burn tokens using the IU2U token contract\r\n        iu2uToken.burn(from, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely execute a contract call (external function for try-catch)\r\n     */\r\n    function _safeExecuteCall(\r\n        bytes32 commandId,\r\n        string memory sourceChain,\r\n        string memory sourceAddress,\r\n        address contractAddress,\r\n        bytes memory payload\r\n    ) external {\r\n        require(msg.sender == address(this), \"Only self\");\r\n\r\n        // Try to call the execute function on the target contract\r\n        (bool success, ) = contractAddress.call(\r\n            abi.encodeWithSignature(\r\n                \"execute(bytes32,string,string,bytes)\",\r\n                commandId,\r\n                sourceChain,\r\n                sourceAddress,\r\n                payload\r\n            )\r\n        );\r\n\r\n        require(success, \"Contract call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Safely execute a contract call with token (external function for try-catch)\r\n     */\r\n    function _safeExecuteCallWithToken(\r\n        bytes32 commandId,\r\n        string memory sourceChain,\r\n        string memory sourceAddress,\r\n        address contractAddress,\r\n        bytes memory payload,\r\n        string memory symbol,\r\n        uint256 amount\r\n    ) external {\r\n        require(msg.sender == address(this), \"Only self\");\r\n\r\n        // Try to call the executeWithToken function on the target contract\r\n        (bool success, ) = contractAddress.call(\r\n            abi.encodeWithSignature(\r\n                \"executeWithToken(bytes32,string,string,bytes,string,uint256)\",\r\n                commandId,\r\n                sourceChain,\r\n                sourceAddress,\r\n                payload,\r\n                symbol,\r\n                amount\r\n            )\r\n        );\r\n\r\n        require(success, \"Contract call with token failed\");\r\n    }\r\n\r\n    // Utility functions\r\n    /**\r\n     * @dev Check if a command has been executed\r\n     * @param commandId The command ID to check\r\n     * @return True if the command has been executed\r\n     */\r\n    function isCommandExecuted(bytes32 commandId) external view returns (bool) {\r\n        return commandExecuted[commandId];\r\n    }\r\n\r\n    /**\r\n     * @dev Check if a contract call is approved\r\n     * @param commandId Unique identifier for the command\r\n     * @return True if the contract call is approved\r\n     */\r\n    function isContractCallApproved(\r\n        bytes32 commandId,\r\n        string calldata /* sourceChain */,\r\n        string calldata /* sourceAddress */,\r\n        address /* contractAddress */,\r\n        bytes32 /* payloadHash */\r\n    ) external view returns (bool) {\r\n        return commandExecuted[commandId];\r\n    }\r\n\r\n    /**\r\n     * @dev Check if a contract call with mint is approved\r\n     * @param commandId Unique identifier for the command\r\n     * @return True if the contract call with mint is approved\r\n     */\r\n    function isContractCallAndMintApproved(\r\n        bytes32 commandId,\r\n        string calldata /* sourceChain */,\r\n        string calldata /* sourceAddress */,\r\n        address /* contractAddress */,\r\n        bytes32 /* payloadHash */,\r\n        string calldata /* symbol */,\r\n        uint256 /* amount */\r\n    ) external view returns (bool) {\r\n        return commandExecuted[commandId];\r\n    }\r\n\r\n    /**\r\n     * @dev Get approved payload for a command\r\n     * @param commandId The command ID to get payload for\r\n     * @return The approved payload data\r\n     */\r\n    function getApprovedPayload(bytes32 commandId) external view returns (bytes memory) {\r\n        return approvedPayloads[commandId];\r\n    }\r\n\r\n    /**\r\n     * @dev Validate contract call for IU2UExecutable contracts\r\n     * @param commandId Unique identifier for the command\r\n     * @param sourceChain Name of the source chain\r\n     * @param sourceAddress Address of the sender on the source chain\r\n     * @param payloadHash Hash of the payload\r\n     * @return True if valid and approved\r\n     */\r\n    function validateContractCall(\r\n        bytes32 commandId,\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        bytes32 payloadHash\r\n    ) external view returns (bool) {\r\n        if (!commandExecuted[commandId]) {\r\n            return false;\r\n        }\r\n\r\n        bytes memory storedPayload = approvedPayloads[commandId];\r\n        if (storedPayload.length == 0) {\r\n            return false;\r\n        }\r\n\r\n        return keccak256(storedPayload) == payloadHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Validate contract call with mint for IU2UExecutable contracts\r\n     * @param commandId Unique identifier for the command\r\n     * @param sourceChain Name of the source chain\r\n     * @param sourceAddress Address of the sender on the source chain\r\n     * @param payloadHash Hash of the payload\r\n     * @param symbol Token symbol\r\n     * @param amount Token amount\r\n     * @return True if valid and approved\r\n     */\r\n    function validateContractCallAndMint(\r\n        bytes32 commandId,\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        bytes32 payloadHash,\r\n        string calldata symbol,\r\n        uint256 amount\r\n    ) external view returns (bool) {\r\n        if (!commandExecuted[commandId]) {\r\n            return false;\r\n        }\r\n\r\n        bytes memory storedPayload = approvedPayloads[commandId];\r\n        if (storedPayload.length == 0) {\r\n            return false;\r\n        }\r\n\r\n        return keccak256(storedPayload) == payloadHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an address is a whitelisted relayer\r\n     * @param relayer The address to check\r\n     * @return True if the address is whitelisted\r\n     */\r\n    function isWhitelistedRelayer(address relayer) external view returns (bool) {\r\n        return whitelisted[relayer];\r\n    }\r\n\r\n    /**\r\n     * @dev Get all whitelisted relayers\r\n     * @return Array of whitelisted relayer addresses\r\n     */\r\n    function getAllRelayers() external view returns (address[] memory) {\r\n        uint256 length = relayers.length();\r\n        address[] memory result = new address[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            result[i] = relayers.at(i);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the number of whitelisted relayers\r\n     * @return The number of relayers\r\n     */\r\n    function getRelayerCount() external view returns (uint256) {\r\n        return relayers.length();\r\n    }\r\n\r\n    // Recover the signer address from the signature\r\n    function recoverSigner(bytes32 _hash, bytes memory _signature) public pure returns (address) {\r\n        bytes32 ethSignedMessageHash = _hash.toEthSignedMessageHash();\r\n        return ethSignedMessageHash.recover(_signature);\r\n    }\r\n\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}